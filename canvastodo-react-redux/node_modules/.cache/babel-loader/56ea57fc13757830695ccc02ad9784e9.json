{"ast":null,"code":"var _jsxFileName = \"/Users/matthewthomas/git/Canvas-Todo-List/canvastodo-react-redux/src/features/canvastodo/canvastodo.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './canvastodo.module.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { addTask, selectTask, setItem, selectListOfTask, removeTask } from './canvastodoSlice.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function CanvasTodo() {\n  _s();\n\n  const todo = useSelector(selectTask);\n  const listOfToDo = useSelector(selectListOfTask);\n  const dispatch = useDispatch();\n\n  const addtoList = () => {\n    if (todo !== '' && todo !== undefined) {\n      let currentTask = {\n        task: todo,\n        id: Date.now(),\n        done: false,\n        notes: \"\"\n      };\n      dispatch(addTask({\n        todo: currentTask\n      }));\n    }\n  };\n\n  const textChange = input => {\n    dispatch(setItem({\n      item: input\n    }));\n  };\n\n  const removeToDo = item => {\n    dispatch(removeTask({\n      task: item\n    }));\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleComment = () => {\n    setIsOpen(!isOpen);\n  };\n\n  function TaskComment(props) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.popupbox,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.box,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.closeicon,\n            onClick: props.closeComment,\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), props.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.red,\n        children: \"Canvas ToDo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 64\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: todo,\n        onChange: event => textChange(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addtoList,\n        children: \"  add todo \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 58\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: listOfToDo.map(item => /*#__PURE__*/_jsxDEV(Draggable, {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(ToDoTask, {\n              value: item.task,\n              onClick: () => removeToDo(item.id),\n              onPress: () => toggleComment()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this), \" \"]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Total Number of Tasks Uncompleted: \", listOfToDo.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isOpen && /*#__PURE__*/_jsxDEV(TaskComment, {\n        content: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Task Outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Save Task Commment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        closeComment: toggleComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CanvasTodo, \"gymSLqIxdBuTXxkpDwn3pUxm0Ew=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = CanvasTodo;\nexport function ToDoTask(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.onClick,\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Comment\",\n      onClick: props.onPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} //how to talk to the main function if you have nested compents\n// export function ListOfTask(props) {\n//   return (\n//     <>\n//     {\n//       props.listOfTodo.map(\n//         (item) => <li key={item.id}> <ToDoTask value={item.task} onClick={() => removeTodo(item.id)}/> </li>)\n//     }\n//     </>\n//   );\n// }\n\n_c2 = ToDoTask;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CanvasTodo\");\n$RefreshReg$(_c2, \"ToDoTask\");","map":{"version":3,"sources":["/Users/matthewthomas/git/Canvas-Todo-List/canvastodo-react-redux/src/features/canvastodo/canvastodo.js"],"names":["useSelector","useDispatch","styles","React","useState","Draggable","addTask","selectTask","setItem","selectListOfTask","removeTask","CanvasTodo","todo","listOfToDo","dispatch","addtoList","undefined","currentTask","task","id","Date","now","done","notes","textChange","input","item","removeToDo","isOpen","setIsOpen","toggleComment","TaskComment","props","popupbox","box","closeicon","closeComment","content","red","event","target","value","map","length","ToDoTask","onClick","onPress"],"mappings":"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","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport styles from './canvastodo.module.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\n\nimport { \n  addTask, \n  selectTask,\n  setItem,\n  selectListOfTask,\n  removeTask,\n} from './canvastodoSlice.js';\n\n\nexport function CanvasTodo () {\n  const todo = useSelector(selectTask);\n  const listOfToDo = useSelector(selectListOfTask);\n  const dispatch = useDispatch();\n\n  const addtoList = () => {\n    if(todo !== '' && todo !== undefined){\n      let currentTask = {\n        task: todo, \n        id: Date.now(), \n        done: false, \n        notes: \"\"\n      };\n      dispatch(addTask({\n        todo: currentTask,\n      }));\n    } \n  };\n  \n  const textChange = (input) => {\n    dispatch(setItem({\n      item: input,\n    }));\n  };\n  const removeToDo = (item) => {\n    dispatch(removeTask({\n      task: item,\n    }));\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n \n  const toggleComment = () => {\n    setIsOpen(!isOpen);\n  }\n\n  function TaskComment(props) {\n    return(\n      <>\n        <div className={styles.popupbox}>\n          <div className={styles.box}>\n            <span className={styles.closeicon} onClick={props.closeComment}>x</span>\n            {props.content}\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <main>\n      <div>\n        <label className={styles.red} >Canvas ToDo List</label><br/>\n        <input type=\"text\" value={todo} onChange={(event) => textChange(event.target.value)}/>\n        <button onClick={addtoList}>  add todo </button> <br/>\n      </div>\n        <div>\n          <ul>\n          {\n            listOfToDo.map(\n            (item) => \n            <Draggable>\n            <li key={item.id}> \n            <ToDoTask value={item.task} onClick={() => removeToDo(item.id)} onPress={() => toggleComment()}/> </li>\n            </Draggable>)\n          }\n            {/* <ListOfTask  listOfTodo={listOfTodo} /> */}\n          </ul>  \n        </div>\n      <div>   \n        <label>\n          Total Number of Tasks Uncompleted: {listOfToDo.length}\n        </label>\n      </div>\n      <div>\n        {\n          isOpen && <TaskComment content={\n            <>\n              <b>Task</b>\n              <p>Task Outline</p>\n              <button>Save Task Commment</button>\n            </>\n          }\n          closeComment={toggleComment}\n          />\n        }\n    </div>\n    </main>\n  );\n}\n\n\n\nexport function ToDoTask(props) {\n  \n  return (\n    <>\n      <input type=\"text\" value={props.value}/>\n      <button onClick={props.onClick}>Done</button>\n      <input type=\"button\" value=\"Comment\" onClick={props.onPress} />\n    </>\n  );\n}  \n\n//how to talk to the main function if you have nested compents\n// export function ListOfTask(props) {\n//   return (\n//     <>\n//     {\n//       props.listOfTodo.map(\n//         (item) => <li key={item.id}> <ToDoTask value={item.task} onClick={() => removeTodo(item.id)}/> </li>)\n//     }\n//     </>\n//   );\n  \n// }\n\n\n\n"]},"metadata":{},"sourceType":"module"}