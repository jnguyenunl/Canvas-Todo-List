{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\nfunction line(text) {\n  return text.split('').map(char => char + '\\u0336').join('');\n}\n\nconst canvastodoSlice = createSlice({\n  name: 'canvasTodo',\n  initialState: {\n    todolist: [],\n    item: ''\n  },\n  reducers: {\n    removeTask: (canvasTodo, action) => {\n      let {\n        task\n      } = action.payload;\n      let listTask = canvasTodo.todolist.find(t => t.id === task);\n\n      if (listTask.done === true) {\n        listTask.task = listTask.task.replace(/[\\u0336]/g, '');\n        listTask.done = false;\n        task = listTask.id;\n      } else {\n        listTask.task = line(listTask.task);\n        listTask.done = true;\n        task = listTask.id;\n      }\n    },\n    addTask: (canvasTodo, action) => {\n      const {\n        todo\n      } = action.payload;\n      canvasTodo.todolist.push(todo);\n    },\n    setItem: (canvasTodo, action) => {\n      const {\n        item\n      } = action.payload;\n      canvasTodo.item = item;\n    },\n    editNotes: (canvasTodo, action) => {\n      let {\n        task,\n        notes\n      } = action.payload;\n      let listTask = canvasTodo.todolist.find(t => t.id === task);\n      listTask.notes = notes;\n      task = listTask.id;\n    }\n  }\n});\nexport function selectTask(state) {\n  return state.canvasTodo.item;\n}\nexport function selectListOfTask(state) {\n  return state.canvasTodo.todolist;\n}\nexport const {\n  addTask,\n  setItem,\n  removeTask,\n  editNotes\n} = canvastodoSlice.actions;\nexport default canvastodoSlice;","map":{"version":3,"sources":["/Users/matthewthomas/git/Canvas-Todo-List/canvastodo-react-redux/src/features/canvastodo/canvastodoSlice.js"],"names":["createSlice","line","text","split","map","char","join","canvastodoSlice","name","initialState","todolist","item","reducers","removeTask","canvasTodo","action","task","payload","listTask","find","t","id","done","replace","addTask","todo","push","setItem","editNotes","notes","selectTask","state","selectListOfTask","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAmB;AACjB,SAAOA,IAAI,CACVC,KADM,CACA,EADA,EAENC,GAFM,CAEFC,IAAI,IAAIA,IAAI,GAAG,QAFb,EAGNC,IAHM,CAGD,EAHC,CAAP;AAID;;AAED,MAAMC,eAAe,GAAGP,WAAW,CAAC;AAClCQ,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,IAAI,EAAE;AAFM,GAFoB;AAMlCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAClC,UAAI;AACFC,QAAAA;AADE,UAEAD,MAAM,CAACE,OAFX;AAGA,UAAIC,QAAQ,GAAGJ,UAAU,CAACJ,QAAX,CAAoBS,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,IAAvC,CAAf;;AACA,UAAIE,QAAQ,CAACI,IAAT,KAAkB,IAAtB,EAA4B;AAC1BJ,QAAAA,QAAQ,CAACF,IAAT,GAAgBE,QAAQ,CAACF,IAAT,CAAcO,OAAd,CAAsB,WAAtB,EAAmC,EAAnC,CAAhB;AACAL,QAAAA,QAAQ,CAACI,IAAT,GAAgB,KAAhB;AACAN,QAAAA,IAAI,GAAGE,QAAQ,CAACG,EAAhB;AACD,OAJD,MAIO;AACLH,QAAAA,QAAQ,CAACF,IAAT,GAAgBf,IAAI,CAACiB,QAAQ,CAACF,IAAV,CAApB;AACAE,QAAAA,QAAQ,CAACI,IAAT,GAAgB,IAAhB;AACAN,QAAAA,IAAI,GAAGE,QAAQ,CAACG,EAAhB;AACD;AACF,KAfO;AAgBRG,IAAAA,OAAO,EAAE,CAACV,UAAD,EAAaC,MAAb,KAAwB;AAC/B,YAAM;AACJU,QAAAA;AADI,UAEFV,MAAM,CAACE,OAFX;AAGAH,MAAAA,UAAU,CAACJ,QAAX,CAAoBgB,IAApB,CAAyBD,IAAzB;AACD,KArBO;AAsBRE,IAAAA,OAAO,EAAE,CAACb,UAAD,EAAaC,MAAb,KAAwB;AAC/B,YAAM;AACJJ,QAAAA;AADI,UAEFI,MAAM,CAACE,OAFX;AAGAH,MAAAA,UAAU,CAACH,IAAX,GAAkBA,IAAlB;AACD,KA3BO;AA4BRiB,IAAAA,SAAS,EAAE,CAACd,UAAD,EAAaC,MAAb,KAAwB;AACjC,UAAI;AACFC,QAAAA,IADE;AAEFa,QAAAA;AAFE,UAGAd,MAAM,CAACE,OAHX;AAIA,UAAIC,QAAQ,GAAGJ,UAAU,CAACJ,QAAX,CAAoBS,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,IAAvC,CAAf;AACAE,MAAAA,QAAQ,CAACW,KAAT,GAAiBA,KAAjB;AACAb,MAAAA,IAAI,GAAGE,QAAQ,CAACG,EAAhB;AACD;AApCO;AANwB,CAAD,CAAnC;AA8CA,OAAO,SAASS,UAAT,CAAoBC,KAApB,EAA2B;AAChC,SAAOA,KAAK,CAACjB,UAAN,CAAiBH,IAAxB;AACD;AACD,OAAO,SAASqB,gBAAT,CAA0BD,KAA1B,EAAiC;AACtC,SAAOA,KAAK,CAACjB,UAAN,CAAiBJ,QAAxB;AACD;AACD,OAAO,MAAM;AACXc,EAAAA,OADW;AAEXG,EAAAA,OAFW;AAGXd,EAAAA,UAHW;AAIXe,EAAAA;AAJW,IAKTrB,eAAe,CAAC0B,OALb;AAOP,eAAe1B,eAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nfunction line(text){\n  return text\n  .split('')\n  .map(char => char + '\\u0336')\n  .join('')\n}\n\nconst canvastodoSlice = createSlice({\n  name: 'canvasTodo',\n  initialState: {\n    todolist: [],\n    item: '',\n  },\n  reducers: {\n    removeTask: (canvasTodo, action) => {\n      let {\n        task,\n      } = action.payload;\n      let listTask = canvasTodo.todolist.find(t => t.id === task)\n      if (listTask.done === true) {\n        listTask.task = listTask.task.replace(/[\\u0336]/g, '')\n        listTask.done = false\n        task = listTask.id\n      } else {\n        listTask.task = line(listTask.task)\n        listTask.done = true\n        task = listTask.id\n      }\n    },\n    addTask: (canvasTodo, action) => {\n      const {\n        todo,\n      } = action.payload;\n      canvasTodo.todolist.push(todo);\n    },\n    setItem: (canvasTodo, action) => {\n      const {\n        item,\n      } = action.payload\n      canvasTodo.item = item;\n    },\n    editNotes: (canvasTodo, action) => {\n      let {\n        task,\n        notes,\n      } = action.payload\n      let listTask = canvasTodo.todolist.find(t => t.id === task)\n      listTask.notes = notes\n      task = listTask.id\n    },\n  },\n});\n\nexport function selectTask(state) {\n  return state.canvasTodo.item;\n}\nexport function selectListOfTask(state) {\n  return state.canvasTodo.todolist;\n}\nexport const {\n  addTask,\n  setItem,\n  removeTask,\n  editNotes,\n} = canvastodoSlice.actions;\n\nexport default canvastodoSlice;"]},"metadata":{},"sourceType":"module"}